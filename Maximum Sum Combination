class Solution {
    public ArrayList<Integer> topKSumPairs(int[] a, int[] b, int k) {
        int n = a.length;
        ArrayList<Integer> ans = new ArrayList<>();

        Arrays.sort(a);
        Arrays.sort(b);
        int[] A = reverse(a), B = reverse(b);

        PriorityQueue<int[]> maxHeap = new PriorityQueue<>((x, y) -> Integer.compare(y[0], x[0]));
        Set<String> visited = new HashSet<>();

        maxHeap.add(new int[]{A[0] + B[0], 0, 0});
        visited.add("0#0");

        while (k-- > 0 && !maxHeap.isEmpty()) {
            int[] top = maxHeap.poll();
            int sum = top[0];
            int i = top[1];
            int j = top[2];
            ans.add(sum);

            if (i + 1 < n && visited.add((i + 1) + "#" + j)) {
                maxHeap.add(new int[]{A[i + 1] + B[j], i + 1, j});
            }

            if (j + 1 < n && visited.add(i + "#" + (j + 1))) {
                maxHeap.add(new int[]{A[i] + B[j + 1], i, j + 1});
            }
        }
        return ans;
    }

    private int[] reverse(int[] arr) {
        int[] res = new int[arr.length];
        for (int i = 0; i < arr.length; i++) {
            res[i] = arr[arr.length - 1 - i];
        }
        return res;
    }
}
